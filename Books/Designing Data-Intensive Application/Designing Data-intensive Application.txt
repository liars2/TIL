서론:

데이터 시스템이 존재하게 된 이유, 오류없는 인터넷 세상을 언제부터 발생하지 않게 되었는가?
기존에는 계산 중심이였는데 요즘에는 데이터의 대한 처리하는 양이 많아져서 데이터 중심으로 바뀌고 있음

본론:
트위터를 예로들고 뭐 고비용의 요청 그리고 중간 평균을 알아야하는데 우리가 아는 (n / n의 갯수)가 아닌 중간값을 기준으로 해야한다.
SLA, SLO 이야기도 나왔었다. 서버가 망가지면 안된다 라는 잉기도 나오고 신뢰성 확장성 유지보수성의 단어를 이야기 하는데 스파게티 코드 이야기도 종종 등장하기도 함

다양한 데이터 모델과 질의 언어를  이야기하는데 각 데이터 베이스마다 특징이 나타내져 있으며 이들의 특징은 서로 다른다

스케일 아웃, 수평 확장 이랑 스케일 인
..

큐나 데이터베이스 마다 특징이 있는데 이들의 데이터 접근 방식은 매우 다른 패턴을 가지고 있어 성능 특성이 있기 때문에 구현 방식이 전혀 다르다

그럼에도 불구하고 데이터 시스템이라는 포괄적인 언어로 이들을 범주화 하였는데 왜 묶었는가?

1. 기존 데이터베이스와 일시적으로 저장하는 큐 형태의 Redis 라던지 여러가지 데이터 저장을 도와주는 솔루션이 존재하는데 이것은 이전과 달리 데이터 시스템 취급을 받고 있다 왜냐하면 지속성 하나가 존재하였기 떄문에 점점 분류 간 경계가 흐려지고 있다.

2. 데이터 베이스 하나만 존재하는 것이 아니라 여러가지의 역할들로 이루어져있다.

그래서 작업은 단일 도구에서 효율적으로 수행할 수 있는 태스크로 나누고 애플리케이션 코드로 인해 수행한다.

서비스 제공을 위해 각 도구를 결합할 때 서비스 인터페이스나 애플리케이션 프로그래밍 인터페이스는 클라이언트가 모르게 구현 세부 사항을 숨긴다.

기본적으로 좀 더 작은 범용 구성 요소들로 새롭고 특수한 목적의 데이터 시스템을 만든다.

그래서 개발자는 애플리케이션 개발자 뿐만 아니라 데이터 시스템 설계자이기도 한다.



데이터 시스템 혹은 서비스를 설계 하려고 할 때 까다로운 문제가 많이 생긴다.

ex) 내부 문제에도 불구하고 데이터 정확하여 일관성 유지? 일부 성능이 저하되더라도 클라이언트에 일관되거 좋은 성능 제공? 부하 증가를 위해 규모 확장? 서비스를 위해 좋은 API?

그래서 데이터-중심 어플리케이션 시스템에서는 크게 3가지를 다룬다

1. 신뢰성

# 신뢰성을 왜 보장?
# 기대치
# 결함

## 하드웨어
## 소프트웨어
## 인적오류

2. 확장성
# 부하 기술하기
# 성능 기술하기
# 부하 대응


3. 유지보수성
# 운용성의 극대화
# 복잡성
# 변화를 쉽게 만들기

